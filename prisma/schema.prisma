// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  blogs     Blog[]
  following Follower[] @relation("FollowerUser")
  followers Follower[] @relation("FollowedUser")
  likes Like[] 
  comments Comment[]
}

model Blog {
  id        Int      @id @default(autoincrement())
  userId    Int
  caption   String
  content   String
  mage     String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes Like[]
  comments Comment[]
}

model Follower {
  id         Int      @id @default(autoincrement())
  userId     Int
  followerId Int
  user       User     @relation(fields: [userId], references: [id], name: "FollowedUser")
  follower   User     @relation(fields: [followerId], references: [id], name: "FollowerUser")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  blogId    Int
  userId    Int
  blog      Blog     @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  blogId    Int
  userId    Int
  comment   String
  blog      Blog     @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}